using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class Player : MonoBehaviour {

	public NavMeshAgent playerAgent;
	public Transform respawnLocation;
	public GameObject deathPanel;

	public CharacterStats characterStats;
	public int currentHealth;
	public int maxHealth = 100;
	public int currentManaLevel;
	public int maxManaLevel = 100;
	public GameObject healFX;
	public GameObject manaFX;

	private Quaternion playerRotation;
	private int toughness;
	private float percentToughness;
	[SerializeField] AudioSource audioSource;
	[SerializeField] AudioClip deathFX;

	void Awake()  {
		characterStats = new CharacterStats (10, 0);
		currentHealth = maxHealth;
		currentManaLevel = maxManaLevel;
		StartCoroutine (addHealthOverTime ());
		UIEventController.PlayerHealthChanged (this.currentHealth, this.maxHealth);
		UIEventController.PlayerManaChanged (this.currentManaLevel, this.maxManaLevel);
	}

	public void TakeDamage(int amount)  {
		//Debug.Log ("Amount Before Toughness Applied : " + amount);
		// retrieve the toughness value of the character plus whatever equipped with 
		for (int i=0; i<characterStats.stats.Count; i++)  {
			if (characterStats.stats[i].StatName == "Toughness")  {
				toughness = characterStats.stats[i].GetCalculatedStatValue();
			}
		}
		if (toughness > 0) {
			percentToughness = (float)toughness / 100f;
			amount -= (int)(toughness * percentToughness);
		}
		//Debug.Log ("Amount After Toughness Applied : " + amount);
		// use the toughness value to alter the amount of the damage the enemy does
		currentHealth -= amount;
		if (currentHealth <= 0)  {
			Die ();
		}
		UIEventController.PlayerHealthChanged (this.currentHealth, this.maxHealth);
	}

	public void HealPlayer(int healAmount)  {
		// create the special effect 
		Vector3 temp = transform.position;
		temp.y = temp.y + 2f;
		GameObject healObj = Instantiate (healFX, temp, Quaternion.identity) as GameObject;
		healObj.transform.SetParent (transform);
		// change the health value and update the UI
		currentHealth += healAmount;
		if (currentHealth >= maxHealth) {
			currentHealth = maxHealth;
		}
		UIEventController.PlayerHealthChanged (this.currentHealth, this.maxHealth);
	}

	// used by enemy scripts (Goblin_NonPatrolling, Goblin_Patrolling, Spider_NonPatrolling to determine when player has dead 
	//   stops attacking player if he has died
	public int CheckHealth()  {
		return currentHealth;
	}

	public void AddManaToPlayer(int manaAmount)  {
		// create the special effect 
		Vector3 temp = transform.position;
		temp.y = temp.y + 2f;
		GameObject manaObj = Instantiate (manaFX, temp, Quaternion.identity) as GameObject;
		manaObj.transform.SetParent (transform);
		// change the mana value and update the UI
		currentManaLevel += manaAmount;
		if (currentManaLevel >= maxManaLevel)  {
			currentManaLevel = maxManaLevel;
		}
		UIEventController.PlayerManaChanged (this.currentManaLevel, this.maxManaLevel);
	}

	public void RemoveManaFromPlayer(int manaAmount)  {
		// change the mana value and update the UI
		currentManaLevel -= manaAmount;
		if (currentManaLevel <= 0 )  {
			currentManaLevel = 0;
		}
		UIEventController.PlayerManaChanged (this.currentManaLevel, this.maxManaLevel);
	}

	//used by staff script to determine if player can hurl projectiles from staff
	public int CheckManaLevel() {
		return currentManaLevel;
	}

	private void Die()  {
		// if player dies, display death panel and move player back to a respawn point
		// start a coroutine to turn off the death panel display after 3 secs
		if (GamePreferences.GetFXState () == 1) {
			audioSource.PlayOneShot (deathFX, 0.25f);
		}
		deathPanel.SetActive (true);
		playerAgent.Warp (respawnLocation.position);
		StartCoroutine (RespawnPlayerAfterDeath());
	}

	IEnumerator addHealthOverTime()  {
		// this runs indefinitely
		while(true)  {
			// if health drops below 100, it will be regenerated by 1 health value every 2 seconds
			if (currentHealth > 0 && currentHealth < 100)  {
				currentHealth += 1;
				UIEventController.PlayerHealthChanged (this.currentHealth, this.maxHealth);
				yield return new WaitForSeconds(2);
			}
			// if health is 100, nothing happens
			else  {
				yield return null;
			}
		}
	}

	IEnumerator RespawnPlayerAfterDeath()  {
		yield return new WaitForSeconds (3f);
		currentHealth = maxHealth;
		UIEventController.PlayerHealthChanged (this.currentHealth, this.maxHealth);
		deathPanel.SetActive (false);
	}
}
